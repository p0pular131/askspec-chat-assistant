
import { useState, useEffect, useCallback } from 'react';
import { UIMessage } from '../types/sessionTypes';
import { useSessionManagement } from './useSessionManagement';
import { useMessageActions } from './useMessageActions';
import { useBuildActions } from './useBuildActions';
import { useChatMode } from './useChatMode';

export function useConversationState() {
  const [messages, setMessages] = useState<UIMessage[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [autoRefreshTriggered, setAutoRefreshTriggered] = useState(false);
  
  const {
    currentSession,
    sessions,
    sessionsLoading,
    showExample,
    setShowExample,
    startNewConversation,
    selectConversation,
    handleDeleteConversation,
    updateSession,
    fetchSessions
  } = useSessionManagement();
  
  const {
    dbMessages,
    msgLoading,
    sendMessage: sendMessageAction,
    loadMessages
  } = useMessageActions(currentSession);
  
  const {
    builds,
    isGeneratingBuilds,
    setIsGeneratingBuilds,
    autoSwitchDisabled,
    handleDeleteBuild,
    handleViewBuild: viewBuildFromHook,
    loadBuilds,
    checkForNewBuilds,
    disableAutoSwitch
  } = useBuildActions();
  
  const {
    chatMode,
    setChatMode,
    getExamplePrompt
  } = useChatMode();

  // Ï¥àÍ∏∞ ÏÑ∏ÏÖò Î™©Î°ù Î°úÎìú
  useEffect(() => {
    fetchSessions();
  }, [fetchSessions]);

  // API Î©îÏãúÏßÄÎ•º UI Î©îÏãúÏßÄÎ°ú Î≥ÄÌôò (Í≤¨Ï†Å ID Ìè¨Ìï®)
  const syncMessagesFromDB = useCallback((apiMessages: typeof dbMessages) => {
    if (apiMessages) {
      const uiMessages: UIMessage[] = apiMessages.map(msg => ({
        text: msg.content,
        isUser: msg.role === 'user',
        chatMode: msg.mode || 'Î≤îÏö© Í≤ÄÏÉâ',
        expertiseLevel: 'beginner', // Í∏∞Î≥∏Í∞í
        estimateId: msg.estimate_id || null // Í≤¨Ï†Å ID Ìè¨Ìï®
      }));
      setMessages(uiMessages);
    }
  }, []);

  // ÏÑ∏ÏÖòÏù¥ Î≥ÄÍ≤ΩÎêòÎ©¥ Î©îÏãúÏßÄ Î°úÎìú
  useEffect(() => {
    if (currentSession?.id) {
      loadMessages(String(currentSession.id));
    } else {
      setMessages([]);
    }
  }, [currentSession, loadMessages]);

  // DB Î©îÏãúÏßÄÍ∞Ä Î≥ÄÍ≤ΩÎêòÎ©¥ UI Î©îÏãúÏßÄ ÎèôÍ∏∞Ìôî
  useEffect(() => {
    syncMessagesFromDB(dbMessages);
  }, [dbMessages, syncMessagesFromDB]);

  // Î©îÏãúÏßÄ Ï†ÑÏÜ° Ìï®Ïàò
  const sendMessage = useCallback(async (text: string, expertiseLevel: string = 'intermediate', chatMode: string = 'Î≤îÏö© Í≤ÄÏÉâ') => {
    if (!text.trim()) return;
    
    console.log('[üì§ Î©îÏãúÏßÄ Ï†ÑÏÜ°] ÏãúÏûë:', { currentSession: currentSession?.id });
    
    setIsLoading(true);
    
    try {
      let sessionToUse = currentSession;
      
      // ÏÑ∏ÏÖòÏù¥ ÏóÜÏúºÎ©¥ ÏÉàÎ°ú ÏÉùÏÑ±
      if (!currentSession) {
        console.log('[üÜï ÏÑ∏ÏÖò ÏÉùÏÑ±] Ï≤´ Î©îÏãúÏßÄÎ•º ÏúÑÌïú ÏÉà ÏÑ∏ÏÖò ÏÉùÏÑ±');
        const newSession = await startNewConversation();
        
        if (!newSession || !newSession.id) {
          throw new Error('ÏÑ∏ÏÖò ÏÉùÏÑ± Ïã§Ìå®');
        }
        
        sessionToUse = newSession;
        console.log('[‚úÖ ÏÑ∏ÏÖò ÏÉùÏÑ±] ÏôÑÎ£å:', sessionToUse.id);
      }
      
      if (!sessionToUse) {
        throw new Error('ÏÇ¨Ïö©Ìï† ÏÑ∏ÏÖòÏù¥ ÏóÜÏäµÎãàÎã§');
      }
      
      console.log('[üì§ Î©îÏãúÏßÄ Ï†ÑÏÜ°] ÏÑ∏ÏÖò ÏÇ¨Ïö©:', sessionToUse.id);
      
      // Ï≤´ Î≤àÏß∏ Î©îÏãúÏßÄÏù∏ Í≤ΩÏö∞ ÏÑ∏ÏÖò Ï†úÎ™© Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏
      if (dbMessages.length === 0) {
        const sessionTitle = text.substring(0, 50);
        console.log('[üìù ÏÑ∏ÏÖò Ï†úÎ™© ÏóÖÎç∞Ïù¥Ìä∏] Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏:', sessionTitle);
        await updateSession(sessionToUse.id, sessionTitle);
      }
      
      // Ïã§Ï†ú Î©îÏãúÏßÄ Ï†ÑÏÜ°
      await sendMessageAction(text, expertiseLevel, chatMode, sessionToUse, () => {
        setAutoRefreshTriggered(false);
        setTimeout(() => loadBuilds(), 1000);
        setTimeout(() => loadBuilds(), 3000);
        setTimeout(() => {
          loadBuilds();
          setAutoRefreshTriggered(true);
        }, 6000);
      });
      
      setShowExample(false);
    } catch (error) {
      console.error('[‚ùå Î©îÏãúÏßÄ Ï†ÑÏÜ°] Ïã§Ìå®:', error);
    } finally {
      setIsLoading(false);
    }
  }, [
    currentSession, 
    startNewConversation, 
    sendMessageAction, 
    updateSession, 
    dbMessages,
    loadBuilds,
    setShowExample
  ]);

  return {
    currentConversation: currentSession,
    messages,
    showExample,
    isLoading,
    conversations: sessions,
    convoLoading: sessionsLoading,
    msgLoading,
    dbMessages,
    builds,
    buildsLoading: false,
    startNewConversation,
    selectConversation,
    handleDeleteConversation,
    handleDeleteBuild,
    handleViewBuild: viewBuildFromHook,
    sendMessage,
    loadMessages,
    syncMessagesFromDB,
    loadBuilds,
    setShowExample,
    chatMode,
    setChatMode,
    getExamplePrompt,
    isGeneratingBuilds,
    setIsGeneratingBuilds,
    autoSwitchDisabled,
    checkForNewBuilds,
    disableAutoSwitch,
    sessionId: currentSession?.id?.toString()
  };
}
